{"version":3,"sources":["components/Header.js","components/Listing.js","components/ListSection.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Listing","style","this","props","job","featured","new","jobLanguages","languages","map","lang","key","onClick","handleClick","jobTools","tools","disp","logo","company","displayNew","displayFeatured","position","postedAt","contract","location","role","level","React","Component","ListSection","bind","state","tags","Set","display","jobs","jobsData","e","target","id","setState","item","dataset","close","prevState","delete","filter","every","tag","includes","size","console","log","add","textContent","jobsComponent","filterComponent","data-close","opacity","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94bc49d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n return (\r\n  <header className=\"header\">\r\n   <img className=\"mobile\" src=\"./images/bg-header-mobile.svg\" alt=\"\"/>\r\n   <img className=\"desktop\" src=\"./images/bg-header-desktop.svg\" alt=\"\"/>\r\n  </header>\r\n )\r\n}\r\n\r\nexport default Header;\r\n\r\n// const Header = styled.header`\r\n//   background: transparent;\r\n//   border-radius: 3px;\r\n//   border: 2px solid palevioletred;\r\n//   color: palevioletred;\r\n//   margin: 0.5em 1em;\r\n//   padding: 0.25em 1em;\r\n\r\n// `;\r\n\r\n// const Container = styled.div`\r\n//   text-align: center;\r\n// `\r\n\r\n","\r\nimport React from 'react';\r\n\r\nclass Listing extends React.Component {\r\n render () {\r\n  const style = {\r\n   \"disp\": {\r\n    \"borderLeft\": this.props.job.featured && \"5px solid #5ba4a4\"\r\n   },\r\n\r\n   \"displayNew\": {\"display\": !this.props.job.new && \"none\"},\r\n   \"displayFeatured\": {\"display\": !this.props.job.featured && \"none\"}\r\n  }\r\n\r\n  const jobLanguages = this.props.job.languages.map(lang => \r\n  <button \r\n  key={lang} \r\n  onClick={this.props.handleClick}>{lang}\r\n  </button>)\r\n  const jobTools = this.props.job.tools.map(tools => \r\n  <button \r\n  key={tools} \r\n  onClick={this.props.handleClick}>{tools}\r\n </button>)\r\n\r\n  return (\r\n   <div className=\"listing\" style={style.disp}>\r\n    <div className=\"details\">\r\n      <img className=\"logo\" src={this.props.job.logo} alt=\"\" />\r\n     <div>     \r\n      <div className=\"info\">\r\n       <p className=\"company\">{this.props.job.company}</p>\r\n       <p className=\"new\" style={style.displayNew}>{this.props.job.new && \"New!\"}</p>\r\n       <p className=\"featured\" style={style.displayFeatured}>{this.props.job.featured && \"Featured\"}</p>\r\n      </div>\r\n      <h2 className=\"position\">{this.props.job.position}</h2>\r\n      <div className=\"post-info\">\r\n       <p className=\"postedAt\">{this.props.job.postedAt} </p><div className=\"bullet\"></div> \r\n       <p className=\"contract\">{this.props.job.contract}</p><div className=\"bullet\"></div>\r\n       <p className=\"location\">{this.props.job.location} </p>\r\n      </div>\r\n     </div>\r\n    </div>\r\n    <div className=\"job-tags\">\r\n     <button onClick={this.props.handleClick}>{this.props.job.role}</button>\r\n     <button onClick={this.props.handleClick}>{this.props.job.level}</button>\r\n     {jobLanguages}\r\n     {jobTools}\r\n    </div>\r\n   </div>  \r\n  )\r\n }\r\n}\r\n\r\nexport default Listing\r\n","import React from 'react';\r\nimport Listing from './Listing';\r\nimport jobsData from '../data.json';\r\n\r\nclass ListSection extends React.Component {\r\n constructor() {\r\n  super();\r\n  this.handleClick = this.handleClick.bind(this);\r\n\r\n  this.state = {\r\n   tags: new Set(),\r\n   display: false,\r\n   jobs: jobsData\r\n  }\r\n }\r\n\r\n handleClick(e) {\r\n  const {target} = e;\r\n\r\n  if(e.target.id === \"clear\") {\r\n    this.setState({\r\n      tags: new Set(),\r\n      display: false,\r\n      jobs: jobsData\r\n    })\r\n  } \r\n  else if(e.target.id === \"close\") {\r\n    const item = e.target.dataset.close;\r\n    this.setState(prevState => {\r\n      prevState.tags.delete(item);\r\n      const jobs = jobsData.filter(job => {\r\n        return [...prevState.tags].every(tag => {\r\n          return job.role === tag || job.level === tag || job.languages.includes(tag) || job.tools.includes(tag)\r\n        })\r\n      });\r\n      if (prevState.tags.size === 0) {\r\n        prevState.display = false;\r\n        prevState.jobs = jobsData;\r\n        console.log(item)\r\n      }\r\n      return {jobs}\r\n    }) \r\n  } else {\r\n    this.setState(prevState =>{\r\n     const tags = prevState.tags.add(target.textContent);\r\n     const display = true;\r\n     const jobs = jobsData.filter(job => {\r\n      return [...prevState.tags].every(tag => {\r\n        return job.role === tag || job.level === tag || job.languages.includes(tag) || job.tools.includes(tag)\r\n      })\r\n    });\r\n\r\n     return {tags, display, jobs};\r\n    })\r\n  }\r\n }\r\n\r\n render() {\r\n  console.log(this.state)\r\n  const jobsComponent = this.state.jobs.map(job => <Listing \r\n   key={job.id} \r\n   job={job}\r\n   handleClick={this.handleClick}\r\n   state={this.state}\r\n   />)  \r\n\r\n   const filterComponent = [...this.state.tags].map(tag => <button  \r\n    key={tag}\r\n    className=\"tag\"\r\n    onClick={this.handleClick}\r\n    >{tag}<img className=\"close\" id=\"close\" data-close={tag} src=\"./images/icon-remove.svg\" alt=\"\"/>\r\n    </button>)\r\n\r\n    const style = {\r\n     display: {\r\n       opacity: this.state.display && 1,\r\n       \"zIndex\": !this.state.display && -1\r\n    }\r\n    }\r\n\r\n   return (\r\n    <section className=\"listings\"> \r\n    <div className=\"filter\" style={style.display}>\r\n     <div className=\"buttons\">\r\n     {filterComponent}\r\n     </div>\r\n     <span className=\"clear\" id=\"clear\" onClick={this.handleClick}>Clear</span>\r\n    </div>\r\n     {jobsComponent}\r\n    </section>\r\n   )\r\n }\r\n}\r\n\r\nexport default ListSection;","import React from 'react';\nimport Header from './components/Header';\nimport ListSection from './components/ListSection';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ListSection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}